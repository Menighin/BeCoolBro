// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using ZenSource.Models;

namespace ZenSource.Migrations
{
    [DbContext(typeof(ZenContext))]
    [Migration("20170909153011_InitialDatabase")]
    partial class InitialDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("ZenSource.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("ZenSource.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ZenSource.Models.ZenMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdLanguage");

                    b.Property<int>("IdZenQuote");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("IdLanguage");

                    b.HasIndex("IdZenQuote");

                    b.ToTable("ZenMessages");
                });

            modelBuilder.Entity("ZenSource.Models.ZenQuote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long>("Dislikes");

                    b.Property<long>("Likes");

                    b.Property<string>("User")
                        .IsRequired();

                    b.Property<bool>("Valid");

                    b.HasKey("Id");

                    b.ToTable("ZenQuotes");
                });

            modelBuilder.Entity("ZenSource.Models.ZenQuoteTag", b =>
                {
                    b.Property<int>("ZenQuoteId");

                    b.Property<int>("TagId");

                    b.HasKey("ZenQuoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ZenQuoteTag");
                });

            modelBuilder.Entity("ZenSource.Models.ZenMessage", b =>
                {
                    b.HasOne("ZenSource.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("IdLanguage")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZenSource.Models.ZenQuote", "ZenQuote")
                        .WithMany("ZenMessages")
                        .HasForeignKey("IdZenQuote")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ZenSource.Models.ZenQuoteTag", b =>
                {
                    b.HasOne("ZenSource.Models.Tag", "Tag")
                        .WithMany("ZenQuoteTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ZenSource.Models.ZenQuote", "ZenQuote")
                        .WithMany("ZenQuoteTags")
                        .HasForeignKey("ZenQuoteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
